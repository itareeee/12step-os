OUTPUT_FORMAT("elf32-h8300")
OUTPUT_ARCH(h8300h)
ENTRY("_start")

MEMORY
{
        romall(rx)      : ORIGIN = 0x000000, LENGTH = 0x080000 /* 512KB */
        vectors(r)      : ORIGIN = 0x000000, LENGTH = 0x000100 /* top of ROM */
        rom(rx)         : ORIGIN = 0x000100, LENGTH = 0x07ff00

        ramall(rwx)     : ORIGIN = 0xffbf20, LENGTH = 0x004000 /* 16KB */
        softvec(rw)     : ORIGIN = 0xffbf20, LENGTH = 0x000040 /* top of RAM: 64byte */
        buffer(rwx)     : ORIGIN = 0xffdf20, LENGTH = 0x001d00 /* ç´„8KB */
        data(rwx)       : ORIGIN = 0xfffc20, LENGTH = 0x000300
        bootstack(rw)   : ORIGIN = 0xffff00, LENGTH = 0x000000 
        intrstack(rw)   : ORIGIN = 0xffff00, LENGTH = 0x000000 /* end of RAM */
}

SECTIONS
{
        .vectors : {
                vector.o(.data)
        } > vectors

        .text : {
                _text_start = . ;
                *(.text)
                _etext = . ;
        } > rom

        .rodata : {
                _rodata_start = . ;
                *(.strings)   
                *(.rodata)   
                *(.rodata.*)   
                _erodata = . ;
        } > rom

        .softvec : {
                _softvec = .; 
        } > softvec

        .buffer : {
                _buffer_start = . ;  
        } > buffer

        .data : {
                _data_start = . ;
                *(.data)
                _edata = . ;
        } > data AT> rom

        .bss : {
                _bss_start = . ;
                *(.bss)
                *(COMMON)
                _ebss = . ;
        } > data AT> rom

        . = ALIGN(4);
        _end = . ;

        .bootstack : {
                _bootstack = .;  
        } > bootstack

        .intrstack : {
                _intrstack = .;  
        } > intrstack
}
